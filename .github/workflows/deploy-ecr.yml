name: Deploy to ECR

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
      - 'Dockerfile'
      - 'requirements.txt'
      - '.github/workflows/deploy-ecr.yml'
  workflow_call:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    environment: AWS_OIDC

    env:
      AWS_REGION: ${{ vars.AWS_REGION || 'ap-northeast-1' }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY || 'dash-plotly' }}
      ECR_REPO: ${{ vars.ECR_REPO }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build Docker image with both tags
          docker build -t ${{ env.ECR_REPO }}:$IMAGE_TAG .
          docker build -t ${{ env.ECR_REPO }}:latest .

          # Push both tags to ECR
          docker push ${{ env.ECR_REPO }}:$IMAGE_TAG
          docker push ${{ env.ECR_REPO }}:latest

          echo "image=${{ env.ECR_REPO }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "‚úÖ Pushed image: ${{ env.ECR_REPO }}:$IMAGE_TAG"
          echo "‚úÖ Pushed image: ${{ env.ECR_REPO }}:latest"
          echo ""
          echo "üöÄ App Runner will automatically deploy the new image."

      - name: Wait for App Runner deployment
        id: wait-deployment
        env:
          SERVICE_ARN: ${{ vars.APP_RUNNER_SERVICE_ARN }}
        run: |
          echo "‚è≥ Waiting for App Runner deployment to complete..."
          echo "Service: $SERVICE_ARN"
          echo ""

          MAX_ATTEMPTS=30
          SLEEP_TIME=20

          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "[$i/$MAX_ATTEMPTS] Checking deployment status..."

            STATUS=$(aws apprunner describe-service \
              --service-arn "$SERVICE_ARN" \
              --query 'Service.Status' \
              --output text \
              --region ${{ env.AWS_REGION }})

            echo "  Current status: $STATUS"

            if [ "$STATUS" = "RUNNING" ]; then
              echo ""
              echo "‚úÖ App Runner deployment successful!"

              # Get service URL
              SERVICE_URL=$(aws apprunner describe-service \
                --service-arn "$SERVICE_ARN" \
                --query 'Service.ServiceUrl' \
                --output text \
                --region ${{ env.AWS_REGION }})

              echo "service_url=https://$SERVICE_URL" >> $GITHUB_OUTPUT
              echo "deployment_status=success" >> $GITHUB_OUTPUT
              exit 0

            elif [ "$STATUS" = "OPERATION_IN_PROGRESS" ]; then
              echo "  ‚è≥ Deployment in progress, waiting ${SLEEP_TIME}s..."
              sleep $SLEEP_TIME

            else
              echo ""
              echo "‚ùå Unexpected status: $STATUS"
              echo "deployment_status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          done

          echo ""
          echo "‚ùå Timeout: Deployment did not complete within $((MAX_ATTEMPTS * SLEEP_TIME))s"
          echo "deployment_status=timeout" >> $GITHUB_OUTPUT
          exit 1

      - name: Send Slack notification (success)
        if: steps.wait-deployment.outputs.deployment_status == 'success'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_INCOMING_WEBHOOK_URL }}
        run: |
          SERVICE_URL="${{ steps.wait-deployment.outputs.service_url }}"
          IMAGE_TAG="${{ github.sha }}"

          MESSAGE='{
            "text": "‚úÖ App Runner Deployment Succeeded",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "‚úÖ *App Runner Deployment Succeeded*\nNew image deployed successfully."
                }
              },
              {
                "type": "section",
                "fields": [
                  {"type": "mrkdwn", "text": "*Image Tag:*\n`'"${IMAGE_TAG:0:7}"'`"},
                  {"type": "mrkdwn", "text": "*Service URL:*\n<'"${SERVICE_URL}"'|Open App>"},
                  {"type": "mrkdwn", "text": "*Branch:*\n`${{ github.ref_name }}`"},
                  {"type": "mrkdwn", "text": "*Trigger:*\n`${{ github.event_name }}`"}
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {"type": "plain_text", "text": "View Workflow"},
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }'

          curl -X POST -H 'Content-type: application/json' --data "$MESSAGE" "$SLACK_WEBHOOK_URL" || true

      - name: Send Slack notification (failure)
        if: failure() || steps.wait-deployment.outputs.deployment_status != 'success'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_INCOMING_WEBHOOK_URL }}
        run: |
          IMAGE_TAG="${{ github.sha }}"
          DEPLOYMENT_STATUS="${{ steps.wait-deployment.outputs.deployment_status }}"

          MESSAGE='{
            "text": "‚ùå App Runner Deployment Failed",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "‚ùå *App Runner Deployment Failed*\nDeployment encountered an error."
                }
              },
              {
                "type": "section",
                "fields": [
                  {"type": "mrkdwn", "text": "*Image Tag:*\n`'"${IMAGE_TAG:0:7}"'`"},
                  {"type": "mrkdwn", "text": "*Status:*\n`'"${DEPLOYMENT_STATUS:-unknown}"'`"},
                  {"type": "mrkdwn", "text": "*Branch:*\n`${{ github.ref_name }}`"},
                  {"type": "mrkdwn", "text": "*Trigger:*\n`${{ github.event_name }}`"}
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "‚ö†Ô∏è *Action Required*\nCheck the workflow logs and App Runner console."
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {"type": "plain_text", "text": "View Workflow"},
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }'

          curl -X POST -H 'Content-type: application/json' --data "$MESSAGE" "$SLACK_WEBHOOK_URL" || true
