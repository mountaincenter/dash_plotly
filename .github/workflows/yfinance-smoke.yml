name: YFinance Smoke Test

on:
  push:
    branches:
      - main
      - yfinance-smoke
  schedule:
    - cron: '0 7 * * *'  # 16:00 JST
    - cron: '0 17 * * *' # 02:00 JST
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

jobs:
  smoke:
    runs-on: ubuntu-latest
    environment: AWS_OIDC

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas pyarrow yfinance boto3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'ap-northeast-1' }}

      - name: Check if already updated today (02:00 JST only)
        id: check_updated
        if: github.event.schedule == '0 17 * * *'
        run: |
          TODAY=$(date -u +%Y-%m-%d)
          BUCKET="${{ vars.DATA_BUCKET || vars.S3_BUCKET }}"
          PREFIX="${{ vars.PARQUET_PREFIX || 'parquet/' }}"
          # S3„Åã„ÇâÊõ¥Êñ∞„Éï„É©„Ç∞„Çí„ÉÅ„Çß„ÉÉ„ÇØ
          if aws s3 cp "s3://${BUCKET}/${PREFIX}update_flag_${TODAY}.txt" ./flag.txt 2>/dev/null; then
            echo "already_updated=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Already updated today (${TODAY}), skipping 02:00 JST run"
          else
            echo "already_updated=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Not updated yet for ${TODAY}, proceeding with 02:00 JST run"
          fi

      - name: Update scalping lists from J-Quants
        if: |
          github.event_name == 'push' ||
          github.event_name == 'workflow_dispatch' ||
          github.event.schedule == '0 7 * * *' ||
          (github.event.schedule == '0 17 * * *' && steps.check_updated.outputs.already_updated != 'true')
        env:
          JQUANTS_REFRESH_TOKEN: ${{ secrets.JQUANTS_REFRESH_TOKEN }}
        run: |
          echo "üìä Generating scalping lists from J-Quants..."
          python jquants/generate_scalping_final.py
          echo "üìù Updating meta.parquet with new scalping stocks..."
          python analyze/create_master_meta.py

      - name: Commit scalping updates
        if: |
          github.event_name == 'push' ||
          github.event_name == 'workflow_dispatch' ||
          github.event.schedule == '0 7 * * *' ||
          (github.event.schedule == '0 17 * * *' && steps.check_updated.outputs.already_updated != 'true')
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/parquet/scalping_*.parquet data/parquet/meta.parquet
          if ! git diff --staged --quiet; then
            TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M UTC")
            git commit -m "Ëá™ÂãïÊõ¥Êñ∞: „Çπ„Ç≠„É£„É´„Éî„É≥„Ç∞ÈäòÊüÑ ${TIMESTAMP} [skip ci]"
            git push
            echo "‚úÖ Pushed scalping updates to repository"
          else
            echo "‚ÑπÔ∏è No changes in scalping lists"
          fi

      - name: Run yfinance smoke script (5 tickers)
        if: |
          github.event_name == 'push' ||
          github.event_name == 'workflow_dispatch' ||
          github.event.schedule == '0 7 * * *' ||
          (github.event.schedule == '0 17 * * *' && steps.check_updated.outputs.already_updated != 'true')
        run: python scripts/yfinance_smoke.py

      - name: Generate parquet samples via yfinance
        if: |
          github.event_name == 'push' ||
          github.event_name == 'workflow_dispatch' ||
          github.event.schedule == '0 7 * * *' ||
          (github.event.schedule == '0 17 * * *' && steps.check_updated.outputs.already_updated != 'true')
        run: python scripts/gen_yfinance_parquet.py

      - name: Mark as updated today
        if: |
          success() &&
          (github.event_name == 'push' ||
           github.event_name == 'workflow_dispatch' ||
           github.event.schedule == '0 7 * * *' ||
           (github.event.schedule == '0 17 * * *' && steps.check_updated.outputs.already_updated != 'true'))
        run: |
          TODAY=$(date -u +%Y-%m-%d)
          BUCKET="${{ vars.DATA_BUCKET || vars.S3_BUCKET }}"
          PREFIX="${{ vars.PARQUET_PREFIX || 'parquet/' }}"
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "Updated at ${TIMESTAMP}" > update_flag_${TODAY}.txt
          aws s3 cp update_flag_${TODAY}.txt "s3://${BUCKET}/${PREFIX}update_flag_${TODAY}.txt"
          echo "‚úÖ Marked ${TODAY} as updated in S3"

      - name: Extract latest data date
        id: data_info
        if: |
          github.event_name == 'push' ||
          github.event_name == 'workflow_dispatch' ||
          github.event.schedule == '0 7 * * *' ||
          (github.event.schedule == '0 17 * * *' && steps.check_updated.outputs.already_updated != 'true')
        # NOTE: gen_yfinance_parquet.py generates prices_max_1d.parquet in the project root
        run: |
          LATEST_DATE=$(python -c "import pandas as pd; print(pd.read_parquet('prices_max_1d.parquet')['date'].max())")
          echo "latest_date=$LATEST_DATE" >> $GITHUB_OUTPUT

      - name: Upload parquet artifact
        if: |
          github.event_name == 'push' ||
          github.event_name == 'workflow_dispatch' ||
          github.event.schedule == '0 7 * * *' ||
          (github.event.schedule == '0 17 * * *' && steps.check_updated.outputs.already_updated != 'true')
        uses: actions/upload-artifact@v4
        with:
          name: yfinance-smoke-test
          path: yfinance-smoke-test-*.parquet

      - name: Send Slack notification (skipped 02:00 JST)
        if: |
          success() &&
          github.event.schedule == '0 17 * * *' &&
          steps.check_updated.outputs.already_updated == 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_INCOMING_WEBHOOK_URL }}
        run: |
          TODAY=$(date -u +%Y-%m-%d)
          MESSAGE='{"text": "‚ÑπÔ∏è YFinance Update Skipped (Already Updated)", "blocks": [{"type": "section", "text": {"type": "mrkdwn", "text": "‚ÑπÔ∏è *YFinance Update Skipped*\nData already updated today (`'"${TODAY}"'`). Skipping 02:00 JST run to reduce load."}}, {"type": "actions", "elements": [{"type": "button", "text": {"type": "plain_text", "text": "View Workflow Run"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}]}]}'
          curl -X POST -H 'Content-type: application/json' --data "$MESSAGE" $SLACK_WEBHOOK_URL

      - name: Send Slack notification on success
        if: |
          success() &&
          (github.event_name == 'push' ||
           github.event_name == 'workflow_dispatch' ||
           github.event.schedule == '0 7 * * *' ||
           (github.event.schedule == '0 17 * * *' && steps.check_updated.outputs.already_updated != 'true'))
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_INCOMING_WEBHOOK_URL }}
        run: |
          MESSAGE='{"text": "‚úÖ YFinance Data Update Succeeded", "blocks": [{"type": "section", "text": {"type": "mrkdwn", "text": "‚úÖ *YFinance Data Update Succeeded*\nWorkflow `${{ github.workflow }}` in `${{ github.repository }}` completed successfully."}}, {"type": "section", "fields": [{"type": "mrkdwn", "text": "*Branch:*\n`${{ github.ref_name }}`"}, {"type": "mrkdwn", "text": "*Event:*\n`${{ github.event_name }}`"}, {"type": "mrkdwn", "text": "*Latest Data Date:*\n`${{ steps.data_info.outputs.latest_date }}`"}]}, {"type": "actions", "elements": [{"type": "button", "text": {"type": "plain_text", "text": "View Workflow Run"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}]}]}'
          curl -X POST -H 'Content-type: application/json' --data "$MESSAGE" $SLACK_WEBHOOK_URL

      - name: Send Slack notification on failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_INCOMING_WEBHOOK_URL }}
        run: |
          MESSAGE='{"text": "‚ùå YFinance Data Update Failed", "blocks": [{"type": "section", "text": {"type": "mrkdwn", "text": "‚ùå *YFinance Data Update Failed*\nWorkflow `${{ github.workflow }}` in `${{ github.repository }}` failed."}}, {"type": "section", "fields": [{"type": "mrkdwn", "text": "*Branch:*\n`${{ github.ref_name }}`"}, {"type": "mrkdwn", "text": "*Event:*\n`${{ github.event_name }}`"}]}, {"type": "actions", "elements": [{"type": "button", "text": {"type": "plain_text", "text": "View Workflow Run"}, "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}]}]}'
          curl -X POST -H 'Content-type: application/json' --data "$MESSAGE" $SLACK_WEBHOOK_URL