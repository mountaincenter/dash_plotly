name: Smoke Test - Fetch Prices

on:
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug output'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  id-token: write
  contents: read

jobs:
  test-fetch-prices:
    runs-on: ubuntu-latest
    environment: AWS_OIDC
    timeout-minutes: 45

    env:
      AWS_REGION: ${{ vars.AWS_REGION || 'ap-northeast-1' }}
      S3_BUCKET: ${{ vars.DATA_BUCKET || vars.S3_BUCKET }}
      S3_PREFIX: ${{ vars.PARQUET_PREFIX || 'parquet/' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download all_stocks.parquet from S3
        run: |
          echo "üì• Downloading all_stocks.parquet from S3..."

          # all_stocks.parquet„ÅØ„É≠„Éº„Ç´„É´ÁîüÊàê„Åï„Çå„Çã„Åü„ÇÅ„ÄÅÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„ÉóÂèØËÉΩ
          # „Åæ„Åö„É≠„Éº„Ç´„É´„ÅÆall_stocks.parquet„ÇíÁîüÊàê„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅ
          # test_create_all_stocks.py„ÇíÂÖà„Å´ÂÆüË°å„Åô„Çã„Åã„ÄÅmeta/scalping„Åã„ÇâÁîüÊàê

          # „Å®„Çä„ÅÇ„Åà„Åömeta.parquet„Å®scalping_*.parquet„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶all_stocksÁîüÊàê
          mkdir -p data/parquet

          aws s3 cp "s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}meta.parquet" data/parquet/meta.parquet
          aws s3 cp "s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}scalping_entry.parquet" data/parquet/scalping_entry.parquet || echo "‚ö†Ô∏è scalping_entry.parquet not found"
          aws s3 cp "s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}scalping_active.parquet" data/parquet/scalping_active.parquet || echo "‚ö†Ô∏è scalping_active.parquet not found"

          echo "Files downloaded:"
          ls -lh data/parquet/

      - name: Generate all_stocks.parquet locally
        env:
          JQUANTS_REFRESH_TOKEN: ${{ secrets.JQUANTS_REFRESH_TOKEN }}
        run: |
          echo "üîß Generating all_stocks.parquet..."
          python smoke_test/test_create_all_stocks.py || echo "‚ö†Ô∏è all_stocks generation had issues, continuing..."

      - name: Run smoke test - Fetch Prices
        env:
          DEBUG_MODE: ${{ github.event.inputs.debug_mode }}
        run: |
          echo "=========================================="
          echo "Smoke Test: Fetch Prices"
          echo "=========================================="
          echo "Debug mode: $DEBUG_MODE"
          echo ""

          if [ "$DEBUG_MODE" = "true" ]; then
            export PYTHONUNBUFFERED=1
            python -u smoke_test/test_fetch_prices.py
          else
            python smoke_test/test_fetch_prices.py
          fi

      - name: Upload price parquet files as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: price-parquet-files
          path: |
            data/parquet/prices_*.parquet
            data/parquet/tech_snapshot_1d.parquet
          retention-days: 7

      - name: Show generated files summary
        if: always()
        run: |
          echo "Generated price files:"
          ls -lh data/parquet/prices_*.parquet 2>/dev/null || echo "No price files found"
          ls -lh data/parquet/tech_snapshot_1d.parquet 2>/dev/null || echo "No tech_snapshot file found"

          echo ""
          echo "Quick analysis of prices_max_1d.parquet:"
          python3 -c "import pandas as pd; df = pd.read_parquet('data/parquet/prices_max_1d.parquet') if __import__('pathlib').Path('data/parquet/prices_max_1d.parquet').exists() else None; print(f'Tickers: {df[\"ticker\"].nunique()}, Total rows: {len(df)}') if df is not None else print('File not found')" || echo "Failed to analyze"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Smoke test failed: Fetch Prices"
          echo "Check the logs for details"
