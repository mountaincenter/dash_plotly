name: Generate Scalping Lists

on:
  workflow_dispatch:
    inputs:
      num_stocks:
        description: 'Number of stocks to process (leave empty for all stocks)'
        required: false
        type: string
  schedule:
    - cron: '0 9 * * 1-5'  # 毎営業日 JST 18:00 (UTC 09:00)

permissions:
  id-token: write
  contents: read

jobs:
  generate-scalping:
    runs-on: ubuntu-latest
    environment: AWS_OIDC

    env:
      AWS_REGION: ${{ vars.AWS_REGION || 'ap-northeast-1' }}
      S3_BUCKET: ${{ vars.DATA_BUCKET || vars.S3_BUCKET }}
      S3_PREFIX: ${{ vars.PARQUET_PREFIX || 'parquet/' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup J-Quants authentication
        run: |
          cat > .env.jquants <<EOF
          JQUANTS_REFRESH_TOKEN=${{ secrets.JQUANTS_REFRESH_TOKEN }}
          EOF
          echo "✅ J-Quants authentication configured"

      - name: Download meta_jquants.parquet from S3
        run: |
          echo "📥 Downloading meta_jquants.parquet from S3..."
          aws s3 cp "s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}meta_jquants.parquet" data/parquet/meta_jquants.parquet

          if [ -f "data/parquet/meta_jquants.parquet" ]; then
            STOCK_COUNT=$(python -c "import pandas as pd; print(len(pd.read_parquet('data/parquet/meta_jquants.parquet')))")
            echo "✅ Downloaded meta_jquants.parquet: ${STOCK_COUNT} stocks"
          else
            echo "❌ Failed to download meta_jquants.parquet"
            exit 1
          fi

      - name: Re-authenticate AWS credentials before long-running task
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate scalping lists
        id: generate_scalping
        env:
          TZ: Asia/Tokyo
          PYTHONUNBUFFERED: 1
          NUM_STOCKS: ${{ github.event.inputs.num_stocks }}
        run: |
          echo "============================================================"
          if [ -z "$NUM_STOCKS" ]; then
            echo "Generate Scalping Lists (All Stocks)"
          else
            echo "Generate Scalping Lists ($NUM_STOCKS Random Stocks)"
          fi
          echo "Started at: $(date +"%Y-%m-%d %H:%M:%S JST")"
          echo "============================================================"
          echo ""
          echo "Environment variables:"
          echo "  S3_BUCKET=${{ env.S3_BUCKET }}"
          echo "  PARQUET_PREFIX=${{ env.S3_PREFIX }}"
          echo "  AWS_REGION=${{ env.AWS_REGION }}"
          if [ -n "$NUM_STOCKS" ]; then
            echo "  NUM_STOCKS=$NUM_STOCKS"
          fi
          echo ""

          python smoke_test/test_scalping.py
          EXIT_CODE=$?

          echo ""
          echo "============================================================"
          echo "Generation completed with exit code: $EXIT_CODE"
          echo "============================================================"

          exit $EXIT_CODE

      - name: Send Slack notification on success
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_INCOMING_WEBHOOK_URL }}
        run: |
          MESSAGE='{
            "text": "✅ Scalping Lists Generated",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "✅ *Scalping Lists Generated*\nAll stocks processed and uploaded to S3 successfully."
                }
              },
              {
                "type": "section",
                "fields": [
                  {"type": "mrkdwn", "text": "*Branch:*\n`${{ github.ref_name }}`"},
                  {"type": "mrkdwn", "text": "*Trigger:*\n`${{ github.event_name }}`"},
                  {"type": "mrkdwn", "text": "*Stocks:*\n`${{ github.event.inputs.num_stocks || 'All' }}`"}
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {"type": "plain_text", "text": "View Workflow Run"},
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }'
          curl -X POST -H 'Content-type: application/json' --data "$MESSAGE" "$SLACK_WEBHOOK_URL" || true

      - name: Send Slack notification on failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_INCOMING_WEBHOOK_URL }}
        run: |
          MESSAGE='{
            "text": "❌ Scalping Generation Failed",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "❌ *Scalping Generation Failed*\nFailed to generate or upload scalping lists."
                }
              },
              {
                "type": "section",
                "fields": [
                  {"type": "mrkdwn", "text": "*Branch:*\n`${{ github.ref_name }}`"},
                  {"type": "mrkdwn", "text": "*Trigger:*\n`${{ github.event_name }}`"},
                  {"type": "mrkdwn", "text": "*Stocks:*\n`${{ github.event.inputs.num_stocks || 'All' }}`"}
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "⚠️ *Action Required*\nPlease check the workflow logs and investigate the failure."
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {"type": "plain_text", "text": "View Workflow Run"},
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }'
          curl -X POST -H 'Content-type: application/json' --data "$MESSAGE" "$SLACK_WEBHOOK_URL" || true
