# App Runner Custom Domain (managed via AWS CLI since Terraform doesn't support it yet)
# This will associate stock.api.ymnk.jp with the App Runner service

resource "null_resource" "apprunner_custom_domain" {
  # Trigger recreation when service ARN or domain name changes
  triggers = {
    service_arn = aws_apprunner_service.stock_api.arn
    domain_name = "stock.api.ymnk.jp"
  }

  # Associate custom domain
  provisioner "local-exec" {
    command = <<-EOT
      # Check if domain is already associated
      CURRENT_STATUS=$(aws apprunner describe-custom-domains \
        --service-arn ${aws_apprunner_service.stock_api.arn} \
        --region ${var.aws_region} \
        --query 'CustomDomains[?DomainName==`stock.api.ymnk.jp`].Status' \
        --output text 2>/dev/null || echo "not_found")

      if [ "$CURRENT_STATUS" != "active" ] && [ "$CURRENT_STATUS" != "pending_certificate_dns_validation" ]; then
        echo "Associating custom domain stock.api.ymnk.jp..."
        aws apprunner associate-custom-domain \
          --service-arn ${aws_apprunner_service.stock_api.arn} \
          --domain-name stock.api.ymnk.jp \
          --no-enable-www-subdomain \
          --region ${var.aws_region}

        # Wait for validation records to be created
        sleep 10

        # Get validation records
        VALIDATION_RECORDS=$(aws apprunner describe-custom-domains \
          --service-arn ${aws_apprunner_service.stock_api.arn} \
          --region ${var.aws_region} \
          --query 'CustomDomains[0].CertificateValidationRecords' \
          --output json)

        echo "Validation records created. They will be added to Route 53 automatically."
        echo "$VALIDATION_RECORDS"
      else
        echo "Custom domain already associated with status: $CURRENT_STATUS"
      fi
    EOT
  }

  # Disassociate on destroy
  provisioner "local-exec" {
    when    = destroy
    command = <<-EOT
      aws apprunner disassociate-custom-domain \
        --service-arn ${self.triggers.service_arn} \
        --domain-name ${self.triggers.domain_name} \
        --region ap-northeast-1 || true
    EOT
  }

  depends_on = [
    aws_apprunner_service.stock_api,
    aws_route53_zone.api_subdomain,
    aws_route53_record.api_caa
  ]
}

# Data source to get certificate validation records
data "external" "apprunner_validation_records" {
  program = ["bash", "-c", <<-EOT
    RECORDS=$(aws apprunner describe-custom-domains \
      --service-arn ${aws_apprunner_service.stock_api.arn} \
      --region ${var.aws_region} \
      --query 'CustomDomains[0].CertificateValidationRecords' \
      --output json 2>/dev/null || echo '[]')

    # Convert to format expected by Terraform
    if [ "$RECORDS" = "[]" ]; then
      echo '{"count": "0"}'
    else
      COUNT=$(echo "$RECORDS" | jq 'length')
      echo "{\"count\": \"$COUNT\"}"
    fi
  EOT
  ]

  depends_on = [null_resource.apprunner_custom_domain]
}

# Note: Certificate validation records need to be added manually or via a script
# because they are dynamically generated by ACM and Terraform can't predict them
# in advance. The records are already in Route 53 from our manual setup.

# Output custom domain status
output "custom_domain_status" {
  description = "Custom domain configuration status"
  value = {
    domain      = "stock.api.ymnk.jp"
    note        = "Certificate validation records must be added to Route 53 manually after first apply"
    nameservers = "Add these to Vercel as NS records for 'api' subdomain"
  }
}
